<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TimerManager for Unity</title>
    <link href="/2024/05/19/timer-manager/"/>
    <url>/2024/05/19/timer-manager/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/timer-manager-for-unity/banner.png"><br>TimerManager for Unity is inspired by UE TimerManager, with performance optimizations and method expansions based on it.</p><p>No GC!!!<br>No GC!!!<br>No GC!!!<br>No garbage collection throughout the usage.</p><h2 id="Entrance"><a href="#Entrance" class="headerlink" title="Entrance"></a>Entrance</h2><p style="display: flex;">  <a href="https://assetstore.unity.com/preview/283711/918315" style="margin: 10px; padding: 10px 20px; background-color: #28A745; color: white; text-decoration: none; border-radius: 5px;">Purchase</a>  <a href="/doc/TimerManager API EN.pdf" style="margin: 10px; padding: 10px 20px; background-color: #FF6666; color: white; text-decoration: none; border-radius: 5px;">API-EN</a>  <a href="/doc/TimerManager API CN.pdf" style="margin: 10px; padding: 10px 20px; background-color: #FF6666; color: white; text-decoration: none; border-radius: 5px;">API-CN</a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="1-Set-Clear-timer"><a href="#1-Set-Clear-timer" class="headerlink" title="1. Set &amp; Clear timer"></a>1. Set &amp; Clear timer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">public class SampleSetTimerAndClearTimer : MonoBehaviour<br>&#123;<br>    public <span class="hljs-built_in">float</span> Duration = 5f;<br>    private TimerHandle handle;<br><br>    private void OnCheck(TimerHandle inHandle)<br>    &#123;<br>        Debug.Log($<span class="hljs-string">&quot;Delegate is excuted by Timer at time &#123;Time.time&#125;&quot;</span>);<br>    &#125;<br><br>    private void <span class="hljs-function"><span class="hljs-title">Update</span></span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyUp(KeyCode.S))<br>        &#123;<br>            TimerManager.GetInstance().SetTimer(ref handle, OnCheck, Duration);<br>            Debug.Log($<span class="hljs-string">&quot;Set Timer at time &#123;Time.time&#125;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyUp(KeyCode.C))<br>        &#123;<br>            TimerManager.GetInstance().ClearTimer(handle);<br>            Debug.Log(<span class="hljs-string">&quot;Clear Timer&quot;</span>);<br>        &#125;<br>    &#125;<br>    private void <span class="hljs-function"><span class="hljs-title">OnDestroy</span></span>()<br>    &#123;<br>        TimerManager.Instance?.ClearAllTimersForObject(this);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Pause-UnPause-timer"><a href="#2-Pause-UnPause-timer" class="headerlink" title="2. Pause &amp; UnPause timer"></a>2. Pause &amp; UnPause timer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">public class SamplePauseAndUnPause : MonoBehaviour<br>&#123;<br>    public <span class="hljs-built_in">float</span> Duration = 2f;<br>    private TimerHandle handle;<br>    private void OnCheck(TimerHandle inHandle)<br>    &#123;<br>        Debug.Log($<span class="hljs-string">&quot;Delegate is excuted by Timer at time &#123;Time.time&#125;&quot;</span>);<br>    &#125;<br>    private void <span class="hljs-function"><span class="hljs-title">Start</span></span>()<br>    &#123;<br>        TimerManager.GetInstance().SetTimer(ref handle, OnCheck, Duration, inbLoop: <span class="hljs-literal">true</span>);<br>    &#125;<br>    private void <span class="hljs-function"><span class="hljs-title">Update</span></span>()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyUp(KeyCode.P))<br>        &#123;<br>            TimerManager.GetInstance().PauseTimer(handle);<br>            Debug.Log($<span class="hljs-string">&quot;Pause timer at time &#123;Time.time&#125;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyUp(KeyCode.U))<br>        &#123;<br>            TimerManager.GetInstance().UnPauseTimer(handle);<br>            Debug.Log($<span class="hljs-string">&quot;Unpause timer at time &#123;Time.time&#125;&quot;</span>);<br>        &#125;<br>    &#125;<br>    private void <span class="hljs-function"><span class="hljs-title">OnDestroy</span></span>()<br>    &#123;<br>        TimerManager.Instance?.ClearAllTimersForObject(this);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>For other usage methods, please refer to the samples and API documentation provided with the plugin</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Model Outline - Smooth Normals Generator</title>
    <link href="/2024/05/19/smooth-normal-generator/"/>
    <url>/2024/05/19/smooth-normal-generator/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/smooth-normal-generator/banner.png"><br>Modify the FBX directly without any additional steps！！！<br>Built-in Mikkt algorithm automatically calculates tangents, no need for FBX to have tangent information！！！<br>Supports storing smooth normals in any UV channel or vertex color.<br>Supports calculating smooth normals in either model space or tangent space.<br>Using the least squares method to enhance adaptability in calculating smooth normal directions.</p><h2 id="Entrance"><a href="#Entrance" class="headerlink" title="Entrance"></a>Entrance</h2><p style="display: flex;">  <a href="https://assetstore.unity.com/preview/281679/921849" style="margin: 10px; padding: 10px 20px; background-color: #28A745; color: white; text-decoration: none; border-radius: 5px;">Purchase</a>  <a href="/doc/smooth-normal-generator.pdf" style="margin: 10px; padding: 10px 20px; background-color: #007BFF; color: white; text-decoration: none; border-radius: 5px;">Document</a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="1-Find-mesh-from-fbx"><a href="#1-Find-mesh-from-fbx" class="headerlink" title="1. Find mesh from fbx"></a>1. Find mesh from fbx</h3><p>In Unity project, find the mesh sub-asset of the fbx asset file you want to outline.<br><img src="/img/smooth-normal-generator/pic1.png"></p><h3 id="2-Generate-smooth-normals"><a href="#2-Generate-smooth-normals" class="headerlink" title="2. Generate smooth normals"></a>2. Generate smooth normals</h3><p>Click on the MenuItem (the button with three dots in the upper right corner of the Inspector), then click on “Generate Smooth Normals” in the popup menu (you will see smooth normals generated in UV3).<br><img src="/img/smooth-normal-generator/pic2.png"><img src="/img/smooth-normal-generator/pic3.png"></p><h3 id="3-Add-material-to-MeshRenderer"><a href="#3-Add-material-to-MeshRenderer" class="headerlink" title="3. Add material to MeshRenderer"></a>3. Add material to MeshRenderer</h3><p>Drag the model into the scene, and then drag “OutlineInTangentSpaceUVMaterial” from “Smooth Normal Generator\Art\Materials” into the Materials of the Skinned Mesh Renderer.<br><img src="/img/smooth-normal-generator/pic4.png"></p><h3 id="WellDone"><a href="#WellDone" class="headerlink" title="WellDone"></a>WellDone</h3><p><img src="/img/smooth-normal-generator/pic5.png"></p><h2 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h2><h3 id="1-Usability"><a href="#1-Usability" class="headerlink" title="1. Usability"></a>1. Usability</h3><p>Update FBX files with a single click, without the need to separately duplicate mesh files for individual processing, and without worrying about data loss when closing the project.</p><h3 id="2-Universality"><a href="#2-Universality" class="headerlink" title="2. Universality"></a>2. Universality</h3><p>Supports generating smooth normals in both model space and tangent space. Smooth normals in tangent space are suitable for animated models. You can choose the UV channel to store the smooth normals, or they can be stored in the vertex color.</p><h3 id="3-Accurate"><a href="#3-Accurate" class="headerlink" title="3. Accurate"></a>3. Accurate</h3><p>Supports least squares method for generating smooth normals, resulting in smooth normals that better adapt to extreme situations.</p><h3 id="4-Robustness"><a href="#4-Robustness" class="headerlink" title="4. Robustness"></a>4. Robustness</h3><p>The plugin includes the MikkT algorithm, which automatically calculates tangent information when generating smooth normals, eliminating the need for tangent information to be included in the FBX file.</p><h1 id="Related-references"><a href="#Related-references" class="headerlink" title="Related references"></a>Related references</h1><p><a href="https://www.researchgate.net/publication/301612007_A_Survey_of_Efficient_Representations_for_Independent_Unit_Vectors">Survey of Efficient Representations for Independent Unit Vectors</a><br><a href="https://github.com/Neos-Metaverse/Mikktspace.NET">Mikktspace</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Welcome to Falling fish studio</title>
    <link href="/2024/05/19/falling-fish/"/>
    <url>/2024/05/19/falling-fish/</url>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-Falling-fish-studio"><a href="#Welcome-to-Falling-fish-studio" class="headerlink" title="Welcome to Falling fish studio"></a>Welcome to Falling fish studio</h2><p>Hi!! Dear developer<br>Welcome to Falling fish studio</p><p>We focus on Gaming technology toolkit<br>Dedicated to improving your game development efficiency and achieving four times the speed of your dream game development. Provide a little bit of energy for every dream builder.</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
